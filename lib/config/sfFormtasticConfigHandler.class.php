<?php

/**
 * Config handler for sfFormtasticYaml.
 * 
 * @package     sfFormtasticPlugin
 * @subpackage  config
 * @author      Kris Wallsmith <kris [dot] wallsmith [at] gmail [dot] com>
 * @version     SVN: $Id$
 */
class sfFormtasticConfigHandler extends sfYamlConfigHandler
{
  protected
    $data   = array(),
    $class  = null,
    $config = array();
  
  /**
   * @see sfConfigHandler
   */
  public function execute($configFiles)
  {
    $this->data[] = '<?php';
    $this->data[] = '';
    $this->data[] = '/*';
    $this->data[] = ' * auto-generated by sfFormtasticConfigHandler';
    $this->data[] = ' * date: '.date('Y/m/d H:i:s');
    $this->data[] = ' */';
    $this->data[] = '';
    
    // parse the yaml
    foreach (self::getConfiguration($configFiles) as $class => $config)
    {
      $this->class  = $class;
      $this->config = $config;
      
      $this->data[] = 'class '.$class.' extends sfFormtastic';
      $this->data[] = '{';
      $this->data[] = '  public function configure()';
      $this->data[] = '  {';
      
      $this->addWidgets();
      $this->addValidators();
      $this->addLabels();
      $this->addHelps();
      
      $this->data[] = '  }';
      $this->data[] = '}';
      $this->data[] = '';
    }
    
    return join("\n", $this->data);
  }
  
  /**
   * Add widgets.
   */
  protected function addWidgets()
  {
    $widgets = array();
    if (isset($this->config['fields']))
    {
      foreach ($this->config['fields'] as $name => $config)
      {
        switch ($name)
        {
          case 'id':
          $widgets[$name] = 'new sfWidgetFormInputHidden';
          break;
          
          default:
          $widgets[$name] = 'new sfWidgetFormInput';
        }
      }
    }
    
    if (count($widgets))
    {
      $this->data[] = '    $this->setWidgets(array(';
      foreach ($widgets as $name => $widget)
      {
        $this->data[] = sprintf('      %s => %s,', var_export($name, true), $widget);
      }
      $this->data[] = '    ));';
      $this->data[] = '    ';
    }
  }
  
  /**
   * Add validators.
   */
  protected function addValidators()
  {
    $validators = array();
    if (isset($this->config['fields']))
    {
      foreach ($this->config['fields'] as $name => $config)
      {
        switch ($name)
        {
          case 'id':
          $validators[$name] = 'new sfValidatorInteger';
          break;
          
          case 'email':
          $validators[$name] = 'new sfValidatorEmail';
          
          default:
          $validators[$name] = 'new sfValidatorPass';
        }
      }
    }
    
    if (count($validators))
    {
      $this->data[] = '    $this->setValidators(array(';
      foreach ($validators as $name => $validator)
      {
        $this->data[] = sprintf('      %s => %s,', var_export($name, true), $validator);
      }
      $this->data[] = '    ));';
      $this->data[] = '    ';
    }
  }
  
  /**
   * Add labels.
   */
  protected function addLabels()
  {
  }
  
  /**
   * Add helps.
   */
  protected function addHelps()
  {
  }
  
  /**
   * @see sfConfigHandler
   */
  static public function getConfiguration(array $configFiles)
  {
    return self::parseYamls($configFiles);
  }
}
