<?php

/**
 * Config handler for sfFormtasticYaml.
 * 
 * @package     sfFormtasticPlugin
 * @subpackage  config
 * @author      Kris Wallsmith <kris [dot] wallsmith [at] gmail [dot] com>
 * @version     SVN: $Id$
 */
class sfFormtasticConfigHandler extends sfYamlConfigHandler
{
  /**
   * @see sfConfigHandler
   */
  public function execute($configFiles)
  {
    // parse the yaml
    foreach (self::getConfiguration($configFiles) as $class => $config)
    {
      break;
    }
    
    $d = array();
    $d[] = '<?php';
    $d[] = '// auto-generated by sfFormtasticConfigHandler';
    $d[] = '// date: '.date('Y/m/d H:i:s');
    $d[] = '';
    $d[] = 'class '.$class.' extends sfFormtastic';
    $d[] = '{';
    $d[] = '  public function configure()';
    $d[] = '  {';
    $d[] = '    $this->setWidgets(array(';
    
    foreach ($config['fields'] as $fieldName => $fieldConfig)
    {
      $this->addWidget($fieldName, $fieldConfig, $d);
    }
    
    $d[] = '    ));';
    $d[] = '';
    $d[] = '    $this->setValidators(array(';
    
    foreach ($config['fields'] as $fieldName => $fieldConfig)
    {
      $this->addValidator($fieldName, $fieldConfig, $d);
    }
    
    $d[] = '    ));';
    $d[] = '';
    $d[] = '    $this->widgetSchema->setLabels(array(';
    
    foreach ($config['fields'] as $fieldName => $fieldConfig)
    {
      $this->addLabel($fieldName, $fieldConfig, $d);
    }
    
    $d[] = '    ));';
    $d[] = '';
    $d[] = '    $this->widgetSchema->setHelps(array(';
    
    foreach ($config['fields'] as $fieldName => $fieldConfig)
    {
      $this->addHelp($fieldName, $fieldConfig, $d);
    }
    
    $d[] = '    ));';
    $d[] = '  }';
    $d[] = '}';
    $d[] = '';
    $d[] = '$formClassName = '.var_export($class, true).';';
    $d[] = '';
    
    return join("\n", $d);
  }
  
  /**
   * Add a widget.
   * 
   * @param   string  $name
   * @param   array   $config
   * @param   array   $d
   */
  protected function addWidget($name, $config, & $d)
  {
    if (!$config)
    {
      switch ($name)
      {
        case 'id':
        $widget = 'new sfWidgetFormInputHidden';
        break;
        
        default:
        $widget = 'new sfWidgetFormInput';
      }
      
      $d[] = sprintf('      %s => %s,', var_export($name, true), $widget);
      
      return true;
    }
  }
  
  /**
   * Add a validator.
   * 
   * @param   string  $name
   * @param   array   $config
   * @param   array   $d
   */
  protected function addValidator($name, $config, & $d)
  {
    if (!$config)
    {
      switch ($name)
      {
        case 'id':
        $validator = 'new sfValidatorInteger';
        break;
        
        case 'email':
        $validator = 'new sfValidatorEmail';
        break;
        
        default:
        $validator = 'new sfValidatorPass';
      }
      
      $d[] = sprintf('      %s => %s,', var_export($name, true), $validator);
      
      return true;
    }
  }
  
  /**
   * Add a label.
   * 
   * @param   string  $name
   * @param   array   $config
   * @param   array   $d
   */
  protected function addLabel($name, $config, & $d)
  {
    if (!$config)
  {
      switch ($name)
      {
      }
      
      return true;
    }
  }
  
  /**
   * Add a help.
   * 
   * @param   string  $name
   * @param   array   $config
   * @param   array   $d
   */
  protected function addHelp($name, $config, & $d)
  {
    if (!$config)
    {
      switch ($name)
      {
      }
      
      return true;
    }
  }
  
  /**
   * @see sfConfigHandler
   */
  static public function getConfiguration(array $configFiles)
  {
    return self::parseYamls($configFiles);
  }
}
